#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram‚Äë–±–æ—Ç ¬´RDA¬†Announcer¬ª

–ö–æ–º–∞–Ω–¥—ã
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
/announcements ‚Äì –ø—Ä–∏—Å–ª–∞—Ç—å –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –∞–Ω–æ–Ω—Å—ã
/sub            ‚Äì –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/unsub          ‚Äì –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
"""

import asyncio
import logging
from typing import Final

from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command

import config           #   ‚Ä¢ BOT_TOKEN             ‚Äì —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–ª @BotFather
import rda_parser       #   ‚Ä¢ build_announcements_message(only_new=False)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(
    format="%(asctime)s | %(levelname)-7s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("RDA‚Äëbot")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞/–¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
bot = Bot(
    token=config.BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)   # —Å—Ä–∞–∑—É HTML‚Äë—Ä–µ–∂–∏–º
)
dp = Dispatcher()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
SUBSCRIBERS: set[int] = {config.DEFAULT_CHAT_ID}   # –≤–ª–∞–¥–µ–ª–µ—Ü/–≥—Ä—É–ø–ø–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helper: ¬´–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
MAX_LEN: Final[int] = 4096          # –ª–∏–º–∏—Ç Telegram –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è


async def safe_send(chat_id: int, text: str) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —É–∫–ª–∞–¥—ã–≤–∞—è—Å—å –≤ 4096¬†—Å–∏–º–≤–æ–ª–æ–≤.
    –†–µ–∂–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –¥–≤–æ–π–Ω–æ–º—É \n\n ‚Äî –≥—Ä–∞–Ω–∏—Ü—ã –∞–Ω–æ–Ω—Å–æ–≤.
    """
    if len(text) <= MAX_LEN:
        await bot.send_message(chat_id, text)
        return

    parts: list[str] = []
    buff: list[str] = []
    cur = 0
    for block in text.split("\n\n"):
        add = block + "\n\n"
        if cur + len(add) > MAX_LEN:
            parts.append("".join(buff).rstrip())
            buff, cur = [], 0
        buff.append(add)
        cur += len(add)
    if buff:
        parts.append("".join(buff).rstrip())

    for chunk in parts:
        await bot.send_message(chat_id, chunk)
        await asyncio.sleep(0.3)          # –º–∏–∫—Ä–æ–ø–∞—É–∑a, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –ª–æ–≥


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ handlers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.message(Command("start"))
async def cmd_start(msg: types.Message) -> None:
    await msg.reply(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø—Ä–∏—Å—ã–ª–∞—é –∞–Ω–æ–Ω—Å—ã —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π RDA.\n\n"
        "<b>/announcements</b> ‚Äî —Å–ø–∏—Å–æ–∫ –∞–Ω–æ–Ω—Å–æ–≤ —Å–µ–π—á–∞—Å\n"
        "<b>/sub</b>           ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–≤—Ç–æ–ø—É—à\n"
        "<b>/unsub</b>         ‚Äî –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è"
    )


@dp.message(Command("announcements"))
async def cmd_announcements(msg: types.Message) -> None:
    text = rda_parser.build_announcements_message()
    if text:
        await safe_send(msg.chat.id, text)
    else:
        await msg.reply("–°–µ–π—á–∞—Å –∞–Ω–æ–Ω—Å–æ–≤ –Ω–µ—Ç.")


@dp.message(Command("sub"))
async def cmd_sub(msg: types.Message) -> None:
    SUBSCRIBERS.add(msg.chat.id)
    await msg.reply("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")


@dp.message(Command("unsub"))
async def cmd_unsub(msg: types.Message) -> None:
    SUBSCRIBERS.discard(msg.chat.id)
    await msg.reply("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ background push loop ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def push_loop() -> None:
    """–ö–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∞–π—Ç –∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –¢–û–õ–¨–ö–û –Ω–æ–≤—ã–µ –∞–Ω–æ–Ω—Å—ã."""
    while True:
        try:
            text = rda_parser.build_announcements_message(only_new=True)
            if text:
                for cid in SUBSCRIBERS.copy():
                    await safe_send(cid, text)
        except Exception:
            log.exception("–û—à–∏–±–∫–∞ –≤ push_loop")
        await asyncio.sleep(config.CHECK_INTERVAL_SEC)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ entry point ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main() -> None:
    # –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –î–û polling
    asyncio.create_task(push_loop())

    log.info(
        "üöÄ Bot started ‚Äî interval %s‚ÄØs | Python¬†%s.%s",
        config.CHECK_INTERVAL_SEC, *asyncio.sys.version_info[:2]
    )

    # start_polling –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫ –¥–æ Ctrl‚ÄëC
    await dp.start_polling(bot, skip_updates=True)


if __name__ == "__main__":
    asyncio.run(main())
