#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–∞—Ä—Å–µ—Ä ¬´–ê–Ω–æ–Ω—Å–æ–≤ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π¬ª —Å‚ÄØrdaward.ru
‚úì –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ—Ç –≤—Å–µ RDA‚Äë–∫–æ–¥—ã (–¥–∞–∂–µ –≤–Ω—É—Ç—Ä–∏ [‚Ä¶])
‚úì –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ—Ç –¥–∞—Ç—ã/–∏—Å—Ç–æ—á–Ω–∏–∫/–¥–æ–±–∞–≤–ª–µ–Ω–æ
‚úì —É–º–µ–µ—Ç –æ—Ç–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ (only_new=True)
"""

import html, re, requests
from datetime import datetime
from bs4 import BeautifulSoup

URL = "https://rdaward.ru"

# –∑–∞–ø–æ–º–∏–Ω–∞–µ–º id –∞–Ω–æ–Ω—Å–æ–≤, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è
_seen: set[str] = set()

RDA_RE = re.compile(r"[A-Z]{2}-\d{2}")           # OM‚Äë07, NS‚Äë44 ‚Ä¶

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _clean_space(txt: str) -> str:
    """–∑–∞–º–µ–Ω—è–µ–º –Ω–µ‚Äë—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ"""
    return re.sub(r"\s+", " ", txt.replace("\xa0", " ")).strip()


def _fetch_fragment() -> str:
    """–æ—Ç–¥–∞—ë—Ç HTML‚Äë—Ñ—Ä–∞–≥–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–∞–π—Ç –≤—Å—Ç–∞–≤–ª—è–µ—Ç JS‚Äë–æ–º"""
    page = requests.get(URL, timeout=20).text
    soup = BeautifulSoup(page, "html.parser")
    script = soup.find("script", string=re.compile(r"var\s+div_contents"))
    raw = re.search(r"var\s+div_contents\s*=\s*'(.+?)';", script.string, re.S).group(1)
    return html.unescape(raw).replace("\\'", "'")


def _unique_ordered(seq):
    seen = set()
    out  = []
    for i in seq:
        if i not in seen:
            out.append(i)
            seen.add(i)
    return out


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ main low‚Äëlevel parse ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _parse() -> list[dict]:
    frag = BeautifulSoup(_fetch_fragment(), "html.parser")
    cards = frag.find_all("div", style=re.compile(r"border:1px solid"))
    out = []

    for card in cards:
        left, right = card.find_all("div", recursive=False)[:2]
        callsign = _clean_space(left.b.text)
        declared = _clean_space(left.span.text)

        right_text = _clean_space(right.get_text(" ", strip=True))

        # –¥–∞—Ç—ã
        m_date = re.search(r"—Å\s*(\d{2}\.\d{2}\.\d{4}).*?–ø–æ\s*(\d{2}\.\d{2}\.\d{4})", right_text)
        d_from, d_to = m_date.groups() if m_date else ("‚Äî", "‚Äî")

        # –∏—Å—Ç–æ—á–Ω–∏–∫, –¥–æ–±–∞–≤–ª–µ–Ω–æ
        m_src  = re.search(r"–∏—Å—Ç–æ—á–Ω–∏–∫:\s*([^,‚Ä¢]+)", right_text, re.I)
        m_add  = re.search(r"–¥–æ–±–∞–≤–ª–µ–Ω–æ:\s*(\d{2}\.\d{2}\.\d{4})", right_text)
        source = _clean_space(m_src.group(1)) if m_src else "‚Äî"
        added  = m_add.group(1) if m_add else "‚Äî"

        # RDA‚Äë–∫–æ–¥—ã: –±–µ—Ä—ë–º –¢–ï–ö–°–¢ —Ü–µ–ª–∏–∫–æ–º ‚Üí –∏—â–µ–º —Ä–µ–≥—ç–∫—Å–ø–æ–º ‚Üí —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
        rdas = _unique_ordered(RDA_RE.findall(right_text))

        out.append({
            "id": f"{callsign}_{declared}",
            "callsign": callsign,
            "date_from": d_from,
            "date_to":   d_to,
            "source":    source,
            "added":     added,
            "rdas":      rdas,
        })
    return out


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø—É–±–ª–∏—á–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_announcements_message(*, only_new=False, wrap: int = 10) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
       wrap ‚Äî —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ RDA –¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ (0 = –Ω–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å)."""
    global _seen
    items = _parse()

    if only_new:
        items = [i for i in items if i["id"] not in _seen]
    if not items:
        return ""

    _seen.update(i["id"] for i in items)

    blocks: list[str] = []
    for a in items:
        # –∫—Ä–∞—Å–∏–≤–æ —É–ø–∞–∫–æ–≤—ã–≤–∞–µ–º RDA‚Äë—Å–ø–∏—Å–æ–∫
        if wrap:
            parts = [", ".join(a["rdas"][i:i + wrap]) for i in range(0, len(a["rdas"]), wrap)]
            rda_txt = ",\n".join(parts)
        else:
            rda_txt = ", ".join(a["rdas"])

        blocks.append(
            f"üì° <b>{a['callsign']}</b> "
            f"(<i>{a['date_from']}‚Äî{a['date_to']}</i>)\n"
            f"üè∑Ô∏è <b>{len(a['rdas'])}</b> —Ä–∞–π–æ–Ω–æ–≤: {rda_txt}\n"
            f"üîó –∏—Å—Ç–æ—á–Ω–∏–∫: <i>{a['source']}</i> ‚Ä¢ ‚ûï {a['added']}"
        )
    return "\n\n".join(blocks)
